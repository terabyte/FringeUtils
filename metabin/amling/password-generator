#!/usr/bin/perl

# Copyright (C) 2010   Keith Amling, keith.amling@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$| = 1;

use strict;
use warnings;

my $az = 'abcdefghijklmnopqrstuvwxyz';
my $AZ = uc($az);
my $nbr = '0123456789';
my $punct = '!"#$%&' . "'" . '()*+,-./:;<=>?@[\]^_`{|}~';
my %classes =
(
    'laz'   => $az,
    'az'    => "$az$AZ",
    'maz'   => "$az$AZ",
    'uaz'   => $AZ,
    'lan'   => "$az$nbr",
    'an'    => "$az$AZ$nbr",
    'man'   => "$az$AZ$nbr",
    'uan'   => "$AZ$nbr",
    'n'     => $nbr,
    'nbr'   => $nbr,
    'punct' => $punct,
    'u'     => '_',
    'nice'  => "_____$az$AZ$nbr",
    'all'   => "$az$AZ$nbr$punct",
    's1' => '01',
    's2' => '011',
);

if(!@ARGV)
{
    @ARGV = ("8man");
}

my @c;
my %used;
my $can_entropy = 1;
for(@ARGV)
{
    if(/^([0-9]+)(.*)$/ && exists($classes{$2}))
    {
        my $ct = $1;
        my $class = $classes{$2};

        for(1..$ct)
        {
            my $i = int(rand() * length($class));
            push @c, substr($class, $i, 1);
        }

        for my $other_class (keys(%used))
        {
            if(intersect($other_class, $class))
            {
                $can_entropy = 0;
            }
        }

        ($used{$class} ||= 0) += $ct;
    }
}

if($can_entropy)
{
    my $order_entropy = 0;
    my $char_entropy = 0;
    my $ttl = 0;
    for my $class (keys(%used))
    {
        $ttl += $used{$class};
    }
    for my $i (1..$ttl)
    {
        $order_entropy += log($i) / log(2);
    }
    for my $class (keys(%used))
    {
        for my $i (1..$used{$class})
        {
            $order_entropy -= log($i) / log(2);
        }
        $char_entropy += class_entropy($class) * $used{$class};
    }
    my $total_entropy = $order_entropy + $char_entropy;
    print "Total entropy: $total_entropy\n";
}

print join("", map { $_->[0] } sort { $a->[1] <=> $b->[1] } map { [$_, rand()] } @c) . "\n";

sub intersect
{
    my ($cl1, $cl2) = @_;

    my %cl1;
    for my $ch (split(//, $cl1))
    {
        $cl1{$ch} = 1;
    }
    for my $ch (split(//, $cl2))
    {
        return 1 if($cl1{$ch});
    }
    return 0;
}

sub class_entropy
{
    my ($cl) = @_;

    my %cl;
    for my $ch (split(//, $cl))
    {
        ($cl{$ch} ||= 0)++;
    }

    my $ttl = length($cl);
    my $entropy = 0;
    for my $ch (keys(%cl))
    {
        my $ct = $cl{$ch};
        $entropy += $ct / $ttl * log($ttl / $ct) / log(2);
    }

    return $entropy;
}
